// +build !ignore_autogenerated

/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./api/v1alpha1.PostgreSQLDatabase":       schema__api_v1alpha1_PostgreSQLDatabase(ref),
		"./api/v1alpha1.PostgreSQLDatabaseSpec":   schema__api_v1alpha1_PostgreSQLDatabaseSpec(ref),
		"./api/v1alpha1.PostgreSQLDatabaseStatus": schema__api_v1alpha1_PostgreSQLDatabaseStatus(ref),
		"./api/v1alpha1.PostgreSQLUser":           schema__api_v1alpha1_PostgreSQLUser(ref),
		"./api/v1alpha1.PostgreSQLUserSpec":       schema__api_v1alpha1_PostgreSQLUserSpec(ref),
		"./api/v1alpha1.PostgreSQLUserStatus":     schema__api_v1alpha1_PostgreSQLUserStatus(ref),
	}
}

func schema__api_v1alpha1_PostgreSQLDatabase(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgreSQLDatabase is the Schema for the postgresqldatabases API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./api/v1alpha1.PostgreSQLDatabaseSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./api/v1alpha1.PostgreSQLDatabaseStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./api/v1alpha1.PostgreSQLDatabaseSpec", "./api/v1alpha1.PostgreSQLDatabaseStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema__api_v1alpha1_PostgreSQLDatabaseSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgreSQLDatabaseSpec defines the desired state of PostgreSQLDatabase",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "Name of the database",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Description: "User name used to connect to the database. If empty Name is used.",
							Ref:         ref("./api/v1alpha1.ResourceVar"),
						},
					},
					"password": {
						SchemaProps: spec.SchemaProps{
							Description: "Password used with the User name to connect to the database",
							Ref:         ref("./api/v1alpha1.ResourceVar"),
						},
					},
					"isShared": {
						SchemaProps: spec.SchemaProps{
							Description: "IsShared indicates whether the database is shared between multiple PostgreSQLDatabase objects. The controller will not grant ownership of the database if this is set to true. Further the owning role of the database is granted to this user to allow access to the resources it may have created before this user was enabled.\n\nThis option is here to support legacy applications sharing database instances and should never be used for new databases.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Description: "Host that the database should be created on.",
							Ref:         ref("./api/v1alpha1.ResourceVar"),
						},
					},
				},
				Required: []string{"name", "password", "host"},
			},
		},
		Dependencies: []string{
			"./api/v1alpha1.ResourceVar"},
	}
}

func schema__api_v1alpha1_PostgreSQLDatabaseStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgreSQLDatabaseStatus defines the observed state of PostgreSQLDatabase",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"phaseUpdated": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"make\" to regenerate code after modifying this file",
							Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"phase": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"host": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"user": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"error": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"phaseUpdated", "phase"},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema__api_v1alpha1_PostgreSQLUser(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgreSQLUser is the Schema for the postgresqlusers API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./api/v1alpha1.PostgreSQLUserSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./api/v1alpha1.PostgreSQLUserStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./api/v1alpha1.PostgreSQLUserSpec", "./api/v1alpha1.PostgreSQLUserStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema__api_v1alpha1_PostgreSQLUserSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgreSQLUserSpec defines the desired state of PostgreSQLUser",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"read": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./api/v1alpha1.AccessSpec"),
									},
								},
							},
						},
					},
					"write": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "atomic",
							},
						},
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./api/v1alpha1.WriteAccessSpec"),
									},
								},
							},
						},
					},
				},
				Required: []string{"name"},
			},
		},
		Dependencies: []string{
			"./api/v1alpha1.AccessSpec", "./api/v1alpha1.WriteAccessSpec"},
	}
}

func schema__api_v1alpha1_PostgreSQLUserStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PostgreSQLUserStatus defines the observed state of PostgreSQLUser",
				Type:        []string{"object"},
			},
		},
	}
}
